# brings Python snippets
extends python

# TODO: add cte_removal from visual
#.............................................................................
#  Query oriented snippets
#.............................................................................
snippet select_query "SQL Query template" b
SELECT
    ${3:*}
FROM ${1:my_table}
endsnippet

snippet cte "Short template for inserting a cte" b
${1:WITH }cte_${2:name} AS (
    ${3:${VISUAL:query}}
)
endsnippet

snippet num_rows_in_table "Short query template for counting num of rows in a table" b
SELECT
    COUNT(1) AS cnt_rows
FROM ${1:my_table}
WHERE
    ${2:ymd} = ${3:20200101}
endsnippet

snippet num_rows_in_table_per_day "Short query template for counting the number of rows per day in a table" b
SELECT
    ymd,
    COUNT(1) AS cnt_rows_per_day
FROM ${1:my_table}
WHERE
    ${2:ymd} BETWEEN ${3:20200615} AND ${4:20200622}
GROUP BY
    ymd
ORDER BY
    ymd DESC
endsnippet

snippet histogram_template "Template for creating a histogram usin SQL syntax" b
SELECT
    FLOOR(${1:my_column}) AS bin_floor,
    COUNT(1) AS cnt_per_bin,
    ROUND(COUNT(1) / (SUM(COUNT(1)) OVER ()) * 100, 2) AS perc_per_bin${2:,
    RPAD('', CAST(LN(COUNT(1)) AS INT), '*') AS preview}
FROM ${3:my_table}
WHERE
    ${4:ymd} = ${5:20200630}
GROUP BY
    FLOOR(${1})
ORDER BY
    bin_floor ASC
endsnippet


#.............................................................................
#  UDFs
#.............................................................................
snippet filter_array_udf "Filters and array of structs based on a field"
trv_udf.filterArray(${1:array_name}, '${2:field_used_to_filter}', ${3:value_to_filter_with})
endsnippet

snippet filter_collection_udf "Filter a collection by using a macro"
trv_udf.filter_collection('${1:macro_name}', ${2:collection})
endsnippet

snippet add_days_udf "Add days to a date (could be negative)"
trv_udf.addDays(${1:date}, ${2:num_days_to_add})
endsnippet

snippet index_of_udf "Finds index of element in an array"
trv_udf.index_of(${1:array}, ${2:element})
endsnippet

snippet aggregate_collection_udf "Aggregate a collection using a function or macro or udf"
trv_udf.aggregate_collection('${1:macro_or_function_or_udf}', ${2:array}${3:, arguments})
endsnippet

snippet array_contains_udf "Check if an element is contained in an array"
array_contains(${1:${VISUAL:array}}, ${2:element})
endsnippet

snippet date_diff_udf "Difference between two dates" b
trv_udf.dateDiff(${1:start_date}, ${2:end_date})
endsnippet

#.............................................................................
#  Misc
#.............................................................................
snippet count_1 "Just inserts COUNT(1)" w
COUNT(1)${1: AS num_${2:rows}${3:,}}
endsnippet

snippet count_distinct "Just inserts COUNT(DISTINCT something)" b
COUNT(DISTINCT ${1:my_col}) AS num_${2:rows}${3:,}
endsnippet

snippet count_and_percent "Count and percent calculation from a col in group by" b
COUNT(1) AS cnt_per_${1:col_name},
ROUND(COUNT(1) / (SUM(COUNT(1)) OVER ()) * 100, 2) AS perc_per_$1
endsnippet

snippet sum_col "Sum of a column and AS name" w
SUM(${1:col})${2: AS ${3:sum_$1}${4:,}}
endsnippet

snippet title "Title frame" b
--.............................................................................
--  ${1:My title}
--.............................................................................
endsnippet

snippet macro "SQL Macro template" b
CREATE TEMPORARY MACRO ${1:my_macro} AS (
${2:COUNT(1)}
)
endsnippet

snippet named_struct_template "Template for a named_struct"
named_struct('${3:key_1}', ${4:value_1},
             '${5:key_2}', ${6:value_2},
             '${7:key_3}', ${8:value_3}
            ) AS ${1:name}${2:,}
endsnippet

snippet drop_table_if_exists "Drop table if exists" b
DROP TABLE IF EXISTS ${1:my_table};
endsnippet

snippet create_table "Create table snippet" b
DROP TABLE IF EXISTS dsanchez.$1;
CREATE ${2:EXTERNAL }TABLE dsanchez.${1:my_table} AS
endsnippet


# .............................................................................
#   Inspect table
# .............................................................................
snippet show_create_table "Query used to check structure of a table" b
SHOW CREATE TABLE ${1:my_table};
endsnippet

snippet show_partitions_of_table "Show the partitions a table has" b
SHOW PARTITIONS ${1:my_table};
endsnippet

snippet describe_table "Describe table, view columns, schema and comments" b
DESCRIBE ${1:my_table};
endsnippet

snippet inspect_table "Quickly check table contents" b
SELECT *
FROM ${1:my_table}
${2:WHERE
    ymd = 20200601}
LIMIT 100;
endsnippet

snippet where "Insert WHERE clause" b
WHERE
    ${1:col} = ${2:condition}
endsnippet

snippet where_between "Insert WHERE clause with BETWEEN" b
WHERE
    ${1:col} BETWEEN ${2:from} AND ${3:up_to}
endsnippet

snippet between_template "Between two dates" w
BETWEEN 2020${1:0701} AND 2020${2:0731}
endsnippet

snippet group_by "Insert GROUP BY clause" b
GROUP BY
    ${1:col}
endsnippet

snippet order_by "Insert ORDER BY clause" b
ORDER BY
    ${1:col} ${2:DESC}
endsnippet

snippet partition_by "Insert a PARTITION BY clause" w
PARTITION BY
endsnippet

snippet having_template "Insert HAVING clause" b
HAVING
    ${1:col} ${2:> condition}
endsnippet

snippet repair_table "Query used to update a table in Hadoop" b
MSCK REPAIR TABLE ${1:my_table};
endsnippet

snippet invalidate_metadata_of_table "Update metadata of a table in Impala" b
INVALIDATE METADATA ${1:my_table}; COMPUTE STATS ${1};
endsnippet

snippet join_with_table "Join with another table snippet" b
JOIN ${1:table}
    ON ${2:col1} = ${3:col2}
endsnippet

snippet left_join_with_table "Join with another table snippet" b
LEFT JOIN ${1:table}
    ON ${2:col1} = ${3:col2}
endsnippet

snippet left_outer_join_with_table "Join with another table snippet" b
LEFT OUTER JOIN ${1:table}
    ON ${2:col1} = ${3:col2}
endsnippet

snippet limit_100 "Add limit clause" b
LIMIT ${1:100}
endsnippet

snippet crunch_date "Insert crunchDate"
\$\{${1:crunchDate}\}
endsnippet

snippet explode_template "Lateral view explode" b
LATERAL VIEW EXPLODE(${1:array_to_explode}) ${3}_array AS ${3:name}
endsnippet

snippet lateral_explode_template "Lateral view explode" b
LATERAL VIEW EXPLODE(${1:array_to_explode}) ${3}_array AS ${3:name}
endsnippet

snippet case_template "Case template" b
CASE ${1:col_name}
    WHEN ${3:case_1} THEN ${4:value_1}
    WHEN ${5:case_2} THEN ${6:value_2}
    ELSE ${7:else_value}
END AS ${2:case_name}
endsnippet

snippet insert_overwrite_into_table "Line to insert data into a table" b
INSERT OVERWRITE TABLE ${1:\$\{HadoopDatabaseToWriteTo\}}.${2:table_name} PARTITION (${3:ymd} = ${4:\$\{crunchDate\}})
endsnippet

snippet sample_template "Simply a Tablesample per rows" b
TABLESAMPLE(${1:100} ROWS)
endsnippet

snippet if_template "IF THEN ELSE"
IF(${1:condition}, ${2:then}, ${3:else})
endsnippet


#.............................................................................
#  Testing python snippets
#.............................................................................

snippet test_snippet "Just a python test" b
`!p snip.rv = 'Hello!'`
endsnippet
# it has snip.rv: return value

# Testing autocomplete snippet
global !p
def complete(t, opts):
    if t:
        opts = [m[len(t):] for m in opts if m.startswith(t)]   # options filtered using start of word input in t
    if len(opts) == 1:
        return opts[0]
    return '[' + '|'.join(opts) + ']'
endglobal

snippet autocomplete_test "Automcomplete testing snippet" b
autocomplete options: $1`!p snip.rv=complete(t[1], ['option1', 'test2', 'hello3'])`
endsnippet
# t[1]: current text of the tabstops, 1 for the $1
# complete function defined in the global snippet


#...................... Regular expression triggering -> they are triggered using <Alt-Tab> (coc-ultisnips)
snippet "^ xx" "Automcomplete testing snippet" r
it triggered!
endsnippet

snippet 'rep (\d+) (\w+)' "Repeat" r
`!p snip.rv = int(match.group(1)) * match.group(2)`
endsnippet
# call it like this: rep 3 hello<Alt-tab>     -> boom!
